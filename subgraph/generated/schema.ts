// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class ExampleEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save ExampleEntity entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ExampleEntity entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ExampleEntity", id.toString(), this);
  }

  static load(id: string): ExampleEntity | null {
    return store.get("ExampleEntity", id) as ExampleEntity | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get count(): BigInt {
    let value = this.get("count");
    return value.toBigInt();
  }

  set count(value: BigInt) {
    this.set("count", Value.fromBigInt(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get approved(): Bytes {
    let value = this.get("approved");
    return value.toBytes();
  }

  set approved(value: Bytes) {
    this.set("approved", Value.fromBytes(value));
  }
}

export class All extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save All entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save All entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("All", id.toString(), this);
  }

  static load(id: string): All | null {
    return store.get("All", id) as All | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get numTokenContracts(): BigInt {
    let value = this.get("numTokenContracts");
    return value.toBigInt();
  }

  set numTokenContracts(value: BigInt) {
    this.set("numTokenContracts", Value.fromBigInt(value));
  }

  get numTokens(): BigInt {
    let value = this.get("numTokens");
    return value.toBigInt();
  }

  set numTokens(value: BigInt) {
    this.set("numTokens", Value.fromBigInt(value));
  }

  get numOwners(): BigInt {
    let value = this.get("numOwners");
    return value.toBigInt();
  }

  set numOwners(value: BigInt) {
    this.set("numOwners", Value.fromBigInt(value));
  }
}

export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Token entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Token entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Token", id.toString(), this);
  }

  static load(id: string): Token | null {
    return store.get("Token", id) as Token | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get contract(): string {
    let value = this.get("contract");
    return value.toString();
  }

  set contract(value: string) {
    this.set("contract", Value.fromString(value));
  }

  get tokenID(): BigInt {
    let value = this.get("tokenID");
    return value.toBigInt();
  }

  set tokenID(value: BigInt) {
    this.set("tokenID", Value.fromBigInt(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get mintTime(): BigInt {
    let value = this.get("mintTime");
    return value.toBigInt();
  }

  set mintTime(value: BigInt) {
    this.set("mintTime", Value.fromBigInt(value));
  }

  get tokenURI(): string {
    let value = this.get("tokenURI");
    return value.toString();
  }

  set tokenURI(value: string) {
    this.set("tokenURI", Value.fromString(value));
  }
}

export class TokenContract extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save TokenContract entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save TokenContract entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("TokenContract", id.toString(), this);
  }

  static load(id: string): TokenContract | null {
    return store.get("TokenContract", id) as TokenContract | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string | null {
    let value = this.get("name");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set name(value: string | null) {
    if (value === null) {
      this.unset("name");
    } else {
      this.set("name", Value.fromString(value as string));
    }
  }

  get symbol(): string | null {
    let value = this.get("symbol");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set symbol(value: string | null) {
    if (value === null) {
      this.unset("symbol");
    } else {
      this.set("symbol", Value.fromString(value as string));
    }
  }

  get doAllAddressesOwnTheirIdByDefault(): boolean {
    let value = this.get("doAllAddressesOwnTheirIdByDefault");
    return value.toBoolean();
  }

  set doAllAddressesOwnTheirIdByDefault(value: boolean) {
    this.set("doAllAddressesOwnTheirIdByDefault", Value.fromBoolean(value));
  }

  get supportsEIP721Metadata(): boolean {
    let value = this.get("supportsEIP721Metadata");
    return value.toBoolean();
  }

  set supportsEIP721Metadata(value: boolean) {
    this.set("supportsEIP721Metadata", Value.fromBoolean(value));
  }

  get tokens(): Array<string> {
    let value = this.get("tokens");
    return value.toStringArray();
  }

  set tokens(value: Array<string>) {
    this.set("tokens", Value.fromStringArray(value));
  }

  get numTokens(): BigInt {
    let value = this.get("numTokens");
    return value.toBigInt();
  }

  set numTokens(value: BigInt) {
    this.set("numTokens", Value.fromBigInt(value));
  }

  get numOwners(): BigInt {
    let value = this.get("numOwners");
    return value.toBigInt();
  }

  set numOwners(value: BigInt) {
    this.set("numOwners", Value.fromBigInt(value));
  }
}

export class TokenInfo extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save TokenInfo entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save TokenInfo entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("TokenInfo", id.toString(), this);
  }

  static load(id: string): TokenInfo | null {
    return store.get("TokenInfo", id) as TokenInfo | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get title(): string {
    let value = this.get("title");
    return value.toString();
  }

  set title(value: string) {
    this.set("title", Value.fromString(value));
  }

  get class_id(): BigInt {
    let value = this.get("class_id");
    return value.toBigInt();
  }

  set class_id(value: BigInt) {
    this.set("class_id", Value.fromBigInt(value));
  }

  get size(): BigInt {
    let value = this.get("size");
    return value.toBigInt();
  }

  set size(value: BigInt) {
    this.set("size", Value.fromBigInt(value));
  }
}

export class Owner extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Owner entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Owner entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Owner", id.toString(), this);
  }

  static load(id: string): Owner | null {
    return store.get("Owner", id) as Owner | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokens(): Array<string> {
    let value = this.get("tokens");
    return value.toStringArray();
  }

  set tokens(value: Array<string>) {
    this.set("tokens", Value.fromStringArray(value));
  }

  get numTokens(): BigInt {
    let value = this.get("numTokens");
    return value.toBigInt();
  }

  set numTokens(value: BigInt) {
    this.set("numTokens", Value.fromBigInt(value));
  }
}

export class OwnerPerTokenContract extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save OwnerPerTokenContract entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save OwnerPerTokenContract entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("OwnerPerTokenContract", id.toString(), this);
  }

  static load(id: string): OwnerPerTokenContract | null {
    return store.get(
      "OwnerPerTokenContract",
      id
    ) as OwnerPerTokenContract | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get contract(): string {
    let value = this.get("contract");
    return value.toString();
  }

  set contract(value: string) {
    this.set("contract", Value.fromString(value));
  }

  get numTokens(): BigInt {
    let value = this.get("numTokens");
    return value.toBigInt();
  }

  set numTokens(value: BigInt) {
    this.set("numTokens", Value.fromBigInt(value));
  }
}

export class TokenTransaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save TokenTransaction entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save TokenTransaction entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("TokenTransaction", id.toString(), this);
  }

  static load(id: string): TokenTransaction | null {
    return store.get("TokenTransaction", id) as TokenTransaction | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token_id(): BigInt {
    let value = this.get("token_id");
    return value.toBigInt();
  }

  set token_id(value: BigInt) {
    this.set("token_id", Value.fromBigInt(value));
  }

  get tx_hash(): string {
    let value = this.get("tx_hash");
    return value.toString();
  }

  set tx_hash(value: string) {
    this.set("tx_hash", Value.fromString(value));
  }
}

export class AuctionList extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save AuctionList entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save AuctionList entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("AuctionList", id.toString(), this);
  }

  static load(id: string): AuctionList | null {
    return store.get("AuctionList", id) as AuctionList | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get count(): BigInt {
    let value = this.get("count");
    return value.toBigInt();
  }

  set count(value: BigInt) {
    this.set("count", Value.fromBigInt(value));
  }

  get creatorAddress(): Bytes {
    let value = this.get("creatorAddress");
    return value.toBytes();
  }

  set creatorAddress(value: Bytes) {
    this.set("creatorAddress", Value.fromBytes(value));
  }

  get contractAddress(): string {
    let value = this.get("contractAddress");
    return value.toString();
  }

  set contractAddress(value: string) {
    this.set("contractAddress", Value.fromString(value));
  }

  get matchId(): string {
    let value = this.get("matchId");
    return value.toString();
  }

  set matchId(value: string) {
    this.set("matchId", Value.fromString(value));
  }

  get openBlock(): BigInt {
    let value = this.get("openBlock");
    return value.toBigInt();
  }

  set openBlock(value: BigInt) {
    this.set("openBlock", Value.fromBigInt(value));
  }

  get cancel_block_number(): BigInt {
    let value = this.get("cancel_block_number");
    return value.toBigInt();
  }

  set cancel_block_number(value: BigInt) {
    this.set("cancel_block_number", Value.fromBigInt(value));
  }

  get expiryBlock(): BigInt {
    let value = this.get("expiryBlock");
    return value.toBigInt();
  }

  set expiryBlock(value: BigInt) {
    this.set("expiryBlock", Value.fromBigInt(value));
  }

  get increment(): BigInt {
    let value = this.get("increment");
    return value.toBigInt();
  }

  set increment(value: BigInt) {
    this.set("increment", Value.fromBigInt(value));
  }

  get expiryExtension(): BigInt {
    let value = this.get("expiryExtension");
    return value.toBigInt();
  }

  set expiryExtension(value: BigInt) {
    this.set("expiryExtension", Value.fromBigInt(value));
  }

  get tokenIndex(): BigInt {
    let value = this.get("tokenIndex");
    return value.toBigInt();
  }

  set tokenIndex(value: BigInt) {
    this.set("tokenIndex", Value.fromBigInt(value));
  }

  get nft_contract_address(): Bytes {
    let value = this.get("nft_contract_address");
    return value.toBytes();
  }

  set nft_contract_address(value: Bytes) {
    this.set("nft_contract_address", Value.fromBytes(value));
  }

  get nft_token_id(): BigInt {
    let value = this.get("nft_token_id");
    return value.toBigInt();
  }

  set nft_token_id(value: BigInt) {
    this.set("nft_token_id", Value.fromBigInt(value));
  }

  get nft_token_amount(): BigInt {
    let value = this.get("nft_token_amount");
    return value.toBigInt();
  }

  set nft_token_amount(value: BigInt) {
    this.set("nft_token_amount", Value.fromBigInt(value));
  }

  get pay_token_address(): Bytes {
    let value = this.get("pay_token_address");
    return value.toBytes();
  }

  set pay_token_address(value: Bytes) {
    this.set("pay_token_address", Value.fromBytes(value));
  }

  get nft_min_bid(): BigInt {
    let value = this.get("nft_min_bid");
    return value.toBigInt();
  }

  set nft_min_bid(value: BigInt) {
    this.set("nft_min_bid", Value.fromBigInt(value));
  }

  get nft_fixed_price(): BigInt {
    let value = this.get("nft_fixed_price");
    return value.toBigInt();
  }

  set nft_fixed_price(value: BigInt) {
    this.set("nft_fixed_price", Value.fromBigInt(value));
  }
}

export class AuctionBidList extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save AuctionBidList entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save AuctionBidList entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("AuctionBidList", id.toString(), this);
  }

  static load(id: string): AuctionBidList | null {
    return store.get("AuctionBidList", id) as AuctionBidList | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get contractAddress(): string {
    let value = this.get("contractAddress");
    return value.toString();
  }

  set contractAddress(value: string) {
    this.set("contractAddress", Value.fromString(value));
  }

  get matchId(): string {
    let value = this.get("matchId");
    return value.toString();
  }

  set matchId(value: string) {
    this.set("matchId", Value.fromString(value));
  }

  get playerAddress(): Bytes {
    let value = this.get("playerAddress");
    return value.toBytes();
  }

  set playerAddress(value: Bytes) {
    this.set("playerAddress", Value.fromBytes(value));
  }

  get tokenIndex(): BigInt {
    let value = this.get("tokenIndex");
    return value.toBigInt();
  }

  set tokenIndex(value: BigInt) {
    this.set("tokenIndex", Value.fromBigInt(value));
  }

  get pay_token_address(): Bytes {
    let value = this.get("pay_token_address");
    return value.toBytes();
  }

  set pay_token_address(value: Bytes) {
    this.set("pay_token_address", Value.fromBytes(value));
  }

  get bid(): BigInt {
    let value = this.get("bid");
    return value.toBigInt();
  }

  set bid(value: BigInt) {
    this.set("bid", Value.fromBigInt(value));
  }

  get expiryBlock(): BigInt {
    let value = this.get("expiryBlock");
    return value.toBigInt();
  }

  set expiryBlock(value: BigInt) {
    this.set("expiryBlock", Value.fromBigInt(value));
  }
}

export class AuctionRewardList extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save AuctionRewardList entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save AuctionRewardList entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("AuctionRewardList", id.toString(), this);
  }

  static load(id: string): AuctionRewardList | null {
    return store.get("AuctionRewardList", id) as AuctionRewardList | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get contractAddress(): string {
    let value = this.get("contractAddress");
    return value.toString();
  }

  set contractAddress(value: string) {
    this.set("contractAddress", Value.fromString(value));
  }

  get matchId(): string {
    let value = this.get("matchId");
    return value.toString();
  }

  set matchId(value: string) {
    this.set("matchId", Value.fromString(value));
  }

  get tokenIndex(): BigInt {
    let value = this.get("tokenIndex");
    return value.toBigInt();
  }

  set tokenIndex(value: BigInt) {
    this.set("tokenIndex", Value.fromBigInt(value));
  }

  get winnerAddress(): Bytes {
    let value = this.get("winnerAddress");
    return value.toBytes();
  }

  set winnerAddress(value: Bytes) {
    this.set("winnerAddress", Value.fromBytes(value));
  }
}

export class TrustMarketplaceOrder extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save TrustMarketplaceOrder entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save TrustMarketplaceOrder entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("TrustMarketplaceOrder", id.toString(), this);
  }

  static load(id: string): TrustMarketplaceOrder | null {
    return store.get(
      "TrustMarketplaceOrder",
      id
    ) as TrustMarketplaceOrder | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get seller(): Bytes {
    let value = this.get("seller");
    return value.toBytes();
  }

  set seller(value: Bytes) {
    this.set("seller", Value.fromBytes(value));
  }

  get buyer(): Bytes {
    let value = this.get("buyer");
    return value.toBytes();
  }

  set buyer(value: Bytes) {
    this.set("buyer", Value.fromBytes(value));
  }

  get nft_address(): Bytes {
    let value = this.get("nft_address");
    return value.toBytes();
  }

  set nft_address(value: Bytes) {
    this.set("nft_address", Value.fromBytes(value));
  }

  get token_id(): BigInt {
    let value = this.get("token_id");
    return value.toBigInt();
  }

  set token_id(value: BigInt) {
    this.set("token_id", Value.fromBigInt(value));
  }

  get token_amount(): BigInt {
    let value = this.get("token_amount");
    return value.toBigInt();
  }

  set token_amount(value: BigInt) {
    this.set("token_amount", Value.fromBigInt(value));
  }

  get pay_token_address(): Bytes {
    let value = this.get("pay_token_address");
    return value.toBytes();
  }

  set pay_token_address(value: Bytes) {
    this.set("pay_token_address", Value.fromBytes(value));
  }

  get price_in_wei(): BigInt {
    let value = this.get("price_in_wei");
    return value.toBigInt();
  }

  set price_in_wei(value: BigInt) {
    this.set("price_in_wei", Value.fromBigInt(value));
  }

  get expires_at(): BigInt {
    let value = this.get("expires_at");
    return value.toBigInt();
  }

  set expires_at(value: BigInt) {
    this.set("expires_at", Value.fromBigInt(value));
  }

  get tx_hash(): string {
    let value = this.get("tx_hash");
    return value.toString();
  }

  set tx_hash(value: string) {
    this.set("tx_hash", Value.fromString(value));
  }

  get is_succ(): BigInt {
    let value = this.get("is_succ");
    return value.toBigInt();
  }

  set is_succ(value: BigInt) {
    this.set("is_succ", Value.fromBigInt(value));
  }

  get create_block_number(): BigInt {
    let value = this.get("create_block_number");
    return value.toBigInt();
  }

  set create_block_number(value: BigInt) {
    this.set("create_block_number", Value.fromBigInt(value));
  }

  get succ_block_number(): BigInt {
    let value = this.get("succ_block_number");
    return value.toBigInt();
  }

  set succ_block_number(value: BigInt) {
    this.set("succ_block_number", Value.fromBigInt(value));
  }

  get cancel_block_number(): BigInt {
    let value = this.get("cancel_block_number");
    return value.toBigInt();
  }

  set cancel_block_number(value: BigInt) {
    this.set("cancel_block_number", Value.fromBigInt(value));
  }

}

export class TrustMarketplaceBid extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save TrustMarketplaceBid entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save TrustMarketplaceBid entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("TrustMarketplaceBid", id.toString(), this);
  }

  static load(id: string): TrustMarketplaceBid | null {
    return store.get("TrustMarketplaceBid", id) as TrustMarketplaceBid | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get nft_address(): Bytes {
    let value = this.get("nft_address");
    return value.toBytes();
  }

  set nft_address(value: Bytes) {
    this.set("nft_address", Value.fromBytes(value));
  }

  get tx_hash(): string {
    let value = this.get("tx_hash");
    return value.toString();
  }

  set tx_hash(value: string) {
    this.set("tx_hash", Value.fromString(value));
  }

  get token_id(): BigInt {
    let value = this.get("token_id");
    return value.toBigInt();
  }

  set token_id(value: BigInt) {
    this.set("token_id", Value.fromBigInt(value));
  }

  get token_amount(): BigInt {
    let value = this.get("token_amount");
    return value.toBigInt();
  }

  set token_amount(value: BigInt) {
    this.set("token_amount", Value.fromBigInt(value));
  }

  get pay_token_address(): Bytes {
    let value = this.get("pay_token_address");
    return value.toBytes();
  }

  set pay_token_address(value: Bytes) {
    this.set("pay_token_address", Value.fromBytes(value));
  }

  get block_number(): BigInt {
    let value = this.get("block_number");
    return value.toBigInt();
  }

  set block_number(value: BigInt) {
    this.set("block_number", Value.fromBigInt(value));
  }

  get bidder(): Bytes {
    let value = this.get("bidder");
    return value.toBytes();
  }

  set bidder(value: Bytes) {
    this.set("bidder", Value.fromBytes(value));
  }

  get price_in_wei(): BigInt {
    let value = this.get("price_in_wei");
    return value.toBigInt();
  }

  set price_in_wei(value: BigInt) {
    this.set("price_in_wei", Value.fromBigInt(value));
  }

  get expires_at(): BigInt {
    let value = this.get("expires_at");
    return value.toBigInt();
  }

  set expires_at(value: BigInt) {
    this.set("expires_at", Value.fromBigInt(value));
  }
}

export class MultiTokenAccount extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save MultiTokenAccount entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save MultiTokenAccount entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("MultiTokenAccount", id.toString(), this);
  }

  static load(id: string): MultiTokenAccount | null {
    return store.get("MultiTokenAccount", id) as MultiTokenAccount | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get balances(): Array<string> {
    let value = this.get("balances");
    return value.toStringArray();
  }

  set balances(value: Array<string>) {
    this.set("balances", Value.fromStringArray(value));
  }

  get transfersOperator(): Array<string> {
    let value = this.get("transfersOperator");
    return value.toStringArray();
  }

  set transfersOperator(value: Array<string>) {
    this.set("transfersOperator", Value.fromStringArray(value));
  }

  get transfersFrom(): Array<string> {
    let value = this.get("transfersFrom");
    return value.toStringArray();
  }

  set transfersFrom(value: Array<string>) {
    this.set("transfersFrom", Value.fromStringArray(value));
  }

  get transfersTo(): Array<string> {
    let value = this.get("transfersTo");
    return value.toStringArray();
  }

  set transfersTo(value: Array<string>) {
    this.set("transfersTo", Value.fromStringArray(value));
  }

  get approvalsOwner(): Array<string> {
    let value = this.get("approvalsOwner");
    return value.toStringArray();
  }

  set approvalsOwner(value: Array<string>) {
    this.set("approvalsOwner", Value.fromStringArray(value));
  }

  get approvalsSpender(): Array<string> {
    let value = this.get("approvalsSpender");
    return value.toStringArray();
  }

  set approvalsSpender(value: Array<string>) {
    this.set("approvalsSpender", Value.fromStringArray(value));
  }
}

export class MultiTokenRegistry extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save MultiTokenRegistry entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save MultiTokenRegistry entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("MultiTokenRegistry", id.toString(), this);
  }

  static load(id: string): MultiTokenRegistry | null {
    return store.get("MultiTokenRegistry", id) as MultiTokenRegistry | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokens(): Array<string> {
    let value = this.get("tokens");
    return value.toStringArray();
  }

  set tokens(value: Array<string>) {
    this.set("tokens", Value.fromStringArray(value));
  }
}

export class MultiToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save MultiToken entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save MultiToken entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("MultiToken", id.toString(), this);
  }

  static load(id: string): MultiToken | null {
    return store.get("MultiToken", id) as MultiToken | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get registry(): string {
    let value = this.get("registry");
    return value.toString();
  }

  set registry(value: string) {
    this.set("registry", Value.fromString(value));
  }

  get identifier(): BigInt {
    let value = this.get("identifier");
    return value.toBigInt();
  }

  set identifier(value: BigInt) {
    this.set("identifier", Value.fromBigInt(value));
  }

  get URI(): string | null {
    let value = this.get("URI");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set URI(value: string | null) {
    if (value === null) {
      this.unset("URI");
    } else {
      this.set("URI", Value.fromString(value as string));
    }
  }

  get totalSupply(): BigInt {
    let value = this.get("totalSupply");
    return value.toBigInt();
  }

  set totalSupply(value: BigInt) {
    this.set("totalSupply", Value.fromBigInt(value));
  }

  get balances(): Array<string> {
    let value = this.get("balances");
    return value.toStringArray();
  }

  set balances(value: Array<string>) {
    this.set("balances", Value.fromStringArray(value));
  }

  get transfers(): Array<string> {
    let value = this.get("transfers");
    return value.toStringArray();
  }

  set transfers(value: Array<string>) {
    this.set("transfers", Value.fromStringArray(value));
  }

  get approvals(): Array<string> {
    let value = this.get("approvals");
    return value.toStringArray();
  }

  set approvals(value: Array<string>) {
    this.set("approvals", Value.fromStringArray(value));
  }
}

export class MultiTokenBalance extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save MultiTokenBalance entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save MultiTokenBalance entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("MultiTokenBalance", id.toString(), this);
  }

  static load(id: string): MultiTokenBalance | null {
    return store.get("MultiTokenBalance", id) as MultiTokenBalance | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get account(): string {
    let value = this.get("account");
    return value.toString();
  }

  set account(value: string) {
    this.set("account", Value.fromString(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get transfersFrom(): Array<string> {
    let value = this.get("transfersFrom");
    return value.toStringArray();
  }

  set transfersFrom(value: Array<string>) {
    this.set("transfersFrom", Value.fromStringArray(value));
  }

  get transfersTo(): Array<string> {
    let value = this.get("transfersTo");
    return value.toStringArray();
  }

  set transfersTo(value: Array<string>) {
    this.set("transfersTo", Value.fromStringArray(value));
  }
}

export class MultiTokenTransfer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save MultiTokenTransfer entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save MultiTokenTransfer entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("MultiTokenTransfer", id.toString(), this);
  }

  static load(id: string): MultiTokenTransfer | null {
    return store.get("MultiTokenTransfer", id) as MultiTokenTransfer | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get token(): string {
    let value = this.get("token");
    return value.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get operator(): string {
    let value = this.get("operator");
    return value.toString();
  }

  set operator(value: string) {
    this.set("operator", Value.fromString(value));
  }

  get from(): string {
    let value = this.get("from");
    return value.toString();
  }

  set from(value: string) {
    this.set("from", Value.fromString(value));
  }

  get fromBalance(): string | null {
    let value = this.get("fromBalance");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set fromBalance(value: string | null) {
    if (value === null) {
      this.unset("fromBalance");
    } else {
      this.set("fromBalance", Value.fromString(value as string));
    }
  }

  get to(): string {
    let value = this.get("to");
    return value.toString();
  }

  set to(value: string) {
    this.set("to", Value.fromString(value));
  }

  get toBalance(): string | null {
    let value = this.get("toBalance");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set toBalance(value: string | null) {
    if (value === null) {
      this.unset("toBalance");
    } else {
      this.set("toBalance", Value.fromString(value as string));
    }
  }

  get value(): BigInt {
    let value = this.get("value");
    return value.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }
}

export class MultiTokenApproval extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save MultiTokenApproval entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save MultiTokenApproval entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("MultiTokenApproval", id.toString(), this);
  }

  static load(id: string): MultiTokenApproval | null {
    return store.get("MultiTokenApproval", id) as MultiTokenApproval | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get token(): string {
    let value = this.get("token");
    return value.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get spender(): string {
    let value = this.get("spender");
    return value.toString();
  }

  set spender(value: string) {
    this.set("spender", Value.fromString(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }
}

export class DecimalValue extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save DecimalValue entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save DecimalValue entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("DecimalValue", id.toString(), this);
  }

  static load(id: string): DecimalValue | null {
    return store.get("DecimalValue", id) as DecimalValue | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get value(): BigDecimal {
    let value = this.get("value");
    return value.toBigDecimal();
  }

  set value(value: BigDecimal) {
    this.set("value", Value.fromBigDecimal(value));
  }

  get exact(): BigInt {
    let value = this.get("exact");
    return value.toBigInt();
  }

  set exact(value: BigInt) {
    this.set("exact", Value.fromBigInt(value));
  }

  get decimals(): i32 {
    let value = this.get("decimals");
    return value.toI32();
  }

  set decimals(value: i32) {
    this.set("decimals", Value.fromI32(value));
  }
}

export class Transaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Transaction entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Transaction entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Transaction", id.toString(), this);
  }

  static load(id: string): Transaction | null {
    return store.get("Transaction", id) as Transaction | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get events(): Array<string> {
    let value = this.get("events");
    return value.toStringArray();
  }

  set events(value: Array<string>) {
    this.set("events", Value.fromStringArray(value));
  }
}

export class PersistentStringArray extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save PersistentStringArray entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save PersistentStringArray entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("PersistentStringArray", id.toString(), this);
  }

  static load(id: string): PersistentStringArray | null {
    return store.get(
      "PersistentStringArray",
      id
    ) as PersistentStringArray | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get values(): Array<string> {
    let value = this.get("values");
    return value.toStringArray();
  }

  set values(value: Array<string>) {
    this.set("values", Value.fromStringArray(value));
  }
}

export class PersistentString extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save PersistentString entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save PersistentString entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("PersistentString", id.toString(), this);
  }

  static load(id: string): PersistentString | null {
    return store.get("PersistentString", id) as PersistentString | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get value(): string {
    let value = this.get("value");
    return value.toString();
  }

  set value(value: string) {
    this.set("value", Value.fromString(value));
  }
}

export class TokenPin extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("user_address", Value.fromBytes(Bytes.empty()));
    this.set("nft_address", Value.fromBytes(Bytes.empty()));
    this.set("token_id", Value.fromBigInt(BigInt.zero()));
    this.set("tx_hash", Value.fromString(""));
    this.set("block_number", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TokenPin entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save TokenPin entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("TokenPin", id.toString(), this);
    }
  }

  static load(id: string): TokenPin | null {
    return changetype<TokenPin | null>(store.get("TokenPin", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user_address(): Bytes {
    let value = this.get("user_address");
    return value!.toBytes();
  }

  set user_address(value: Bytes) {
    this.set("user_address", Value.fromBytes(value));
  }

  get nft_address(): Bytes {
    let value = this.get("nft_address");
    return value!.toBytes();
  }

  set nft_address(value: Bytes) {
    this.set("nft_address", Value.fromBytes(value));
  }

  get token_id(): BigInt {
    let value = this.get("token_id");
    return value!.toBigInt();
  }

  set token_id(value: BigInt) {
    this.set("token_id", Value.fromBigInt(value));
  }

  get block_number(): BigInt {
    let value = this.get("block_number");
    return value!.toBigInt();
  }

  set block_number(value: BigInt) {
    this.set("block_number", Value.fromBigInt(value));
  }
}


