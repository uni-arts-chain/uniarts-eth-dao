type ExampleEntity @entity {
  id: ID!
  count: BigInt!
  owner: Bytes! # address
  approved: Bytes! # address
}

type All @entity {
  id: ID!
  numTokenContracts: BigInt!
  numTokens: BigInt!
  numOwners: BigInt!
}

type Token @entity {
  id: ID!
  contract: TokenContract!
  tokenID: BigInt!
  owner: Owner!
  mintTime: BigInt!
  tokenURI: String!
}

type TokenContract @entity {
  id: ID!
  name: String,
  symbol: String,
  doAllAddressesOwnTheirIdByDefault: Boolean!
  supportsEIP721Metadata: Boolean!
  tokens: [Token!]! @derivedFrom(field: "contract")
  numTokens: BigInt!
  numOwners: BigInt!
}

type TokenInfo @entity {
  id: ID!
  title: String!
  class_id: BigInt!
  size: BigInt!
}

type Owner @entity {
  id: ID!
  tokens: [Token!]! @derivedFrom(field: "owner")
  numTokens: BigInt!
}

type OwnerPerTokenContract @entity {
  id: ID!
  owner: Owner!
  contract: TokenContract!
  numTokens: BigInt!
}

type TokenTransaction @entity {
  id: ID!
  token_id: BigInt!
  tx_hash: String! # tx_hash
}

type AuctionList @entity {
  id: ID!
  contractAddress: String! # string
  count: BigInt!
  creatorAddress: Bytes! # address
  matchId: String! # string
  openBlock: BigInt!
  expiryBlock: BigInt!
  increment: BigInt!
  expiryExtension: BigInt!
  tokenIndex: BigInt!
  nft_contract_address: Bytes! # address
  nft_token_id: BigInt!
  nft_token_amount: BigInt
  pay_token_address: Bytes # address
  nft_min_bid: BigInt!
  nft_fixed_price: BigInt!
  cancel_block_number: BigInt!
}

type AuctionBidList @entity {
  id: ID!
  contractAddress: String! # string
  matchId: String! # string
  playerAddress: Bytes! # address
  tokenIndex: BigInt!
  bid: BigInt!
  pay_token_address: Bytes # address
  expiryBlock: BigInt!
}

type AuctionRewardList @entity {
  id: ID!
  contractAddress: String! # string
  matchId: String! # string
  tokenIndex: BigInt!
  winnerAddress: Bytes! # address
}

type TrustMarketplaceOrder @entity {
  id: ID!
  seller: Bytes! # address
  buyer: Bytes # address
  nft_address: Bytes! # address
  token_id: BigInt!
  token_amount: BigInt
  pay_token_address: Bytes # address
  price_in_wei: BigInt!
  expires_at: BigInt!
  is_succ: BigInt!
  create_block_number: BigInt!
  succ_block_number: BigInt!
  cancel_block_number: BigInt!
  tx_hash: String! # tx_hash
}

type TrustMarketplaceBid @entity {
  id: ID!
  nft_address: Bytes! # address
  token_id: BigInt!
  token_amount: BigInt
  bidder: Bytes! # address
  pay_token_address: Bytes # address
  price_in_wei: BigInt!
  expires_at: BigInt!
  tx_hash: String! # tx_hash
  block_number: BigInt!
}

type TokenPin @entity {
  id: ID!
  user_address: Bytes! # address
  nft_address: Bytes!  # address
  token_id: BigInt!
  block_number: BigInt!
}

type MultiTokenAccount @entity {
	id:                           ID!
	balances:                     [MultiTokenBalance!]! @derivedFrom(field: "account")
	transfersOperator:            [MultiTokenTransfer!]! @derivedFrom(field: "operator")
	transfersFrom:                [MultiTokenTransfer!]! @derivedFrom(field: "from")
	transfersTo:                  [MultiTokenTransfer!]! @derivedFrom(field: "to")
	approvalsOwner:               [MultiTokenApproval!]! @derivedFrom(field: "owner")
	approvalsSpender:             [MultiTokenApproval!]! @derivedFrom(field: "spender")
}

type MultiTokenRegistry @entity {
	id:                           ID!
	tokens:                       [MultiToken!]! @derivedFrom(field: "registry")
}

type MultiToken @entity {
	id:                           ID!
	registry:                     MultiTokenRegistry!
	identifier:                   BigInt!
	URI:                          String
	totalSupply:                  BigInt!
	balances:                     [MultiTokenBalance!]! @derivedFrom(field: "token")
	transfers:                    [MultiTokenTransfer!]! @derivedFrom(field: "token")
	approvals:                    [MultiTokenApproval!]! @derivedFrom(field: "token")
}

type MultiTokenBalance @entity {
	id:                           ID!
	token:                        MultiToken!
	account:                      MultiTokenAccount!
	value:                        BigInt!
	transfersFrom:                [MultiTokenTransfer!]! @derivedFrom(field: "fromBalance")
	transfersTo:                  [MultiTokenTransfer!]! @derivedFrom(field: "toBalance")
}

type MultiTokenTransfer implements Event @entity {
	id:                           ID!
	transaction:                  Transaction!
	timestamp:                    BigInt!
	token:                        MultiToken!
	operator:                     MultiTokenAccount!
	from:                         MultiTokenAccount!
	fromBalance:                  MultiTokenBalance
	to:                           MultiTokenAccount!
	toBalance:                    MultiTokenBalance
	value:                        BigInt!
}

type MultiTokenApproval implements Event @entity {
	id:                           ID!
	transaction:                  Transaction!
	timestamp:                    BigInt!
	token:                        MultiToken!
	owner:                        MultiTokenAccount!
	spender:                      MultiTokenAccount!
	value:                        BigInt!
}

type DecimalValue @entity {
	id:                           ID!
	value:                        BigDecimal!
	exact:                        BigInt!
	decimals:                     Int!
}

interface Event {
	id:                           ID!
	transaction:                  Transaction!
	timestamp:                    BigInt!
}

type Transaction @entity {
	id:                           ID!
	timestamp:                    BigInt!
	blockNumber:                  BigInt!
	events:                       [Event!]! @derivedFrom(field: "transaction")
}

type PersistentStringArray @entity {
	id:                           ID!
	values:                       [String!]!
}

type PersistentString @entity {
	id:                           ID!
	value:                        String!
}

type TokenMint @entity {
  id: ID!
  user_address: Bytes! # address
  amount: BigInt!
}